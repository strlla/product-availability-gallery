import { SYMBOL_CUSTOM_CLASSES } from './useCustomClasses';
export declare type ValuesOf<T extends readonly unknown[]> = T[number];
declare type CustomClassItem = string | {
    name: string;
    applyModifiers?: boolean;
};
export declare type CssHandlesList = readonly string[];
export declare type CssHandles<T extends CssHandlesList> = Record<ValuesOf<T>, string>;
export declare type WithModifiers<T extends CssHandlesList> = (handleName: ValuesOf<T>, modifier: string | string[]) => string;
/**
 * Collection of css handle utilities returned by `useCssHandles`
 */
export declare type CssHandlesBag<T extends CssHandlesList> = {
    handles: CssHandles<T>;
    withModifiers: WithModifiers<T>;
};
/**
 * Props added to a wrapped component via `withCssHandles`
 */
export declare type WithCssHandlesBag<T extends CssHandlesList, Props> = Props & CssHandlesBag<T>;
export declare type CustomClassValue = CustomClassItem | CustomClassItem[];
export declare type CustomClasses<T extends CssHandlesList> = {
    [key in ValuesOf<T>]?: CustomClassValue;
} & {
    /**
     * Internal custom classes key
     * @private
     */
    __useCustomClasses: typeof SYMBOL_CUSTOM_CLASSES;
};
export interface CssHandlesOptions<T extends CssHandlesList> {
    migrationFrom?: string | string[];
    classes?: CustomClasses<T>;
}
export {};
